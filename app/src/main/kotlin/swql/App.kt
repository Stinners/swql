/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package swql

import java.io.File;
import java.nio.file.Paths

fun extractQueries(file: File): ArrayList<String> {
    val text = file.readText()
    var results = ArrayList<String>()
    var start = 0 
    var quote = false

    for (i in 0..(text.length-1)) {
        val c = text[i];

        if (c == '\'') {
            if (i == 0 || !quote || text[i-1] != '\\') {
                quote = !quote
            }
        }

        else if (c == ';' && !quote) {
            val query = text.substring(start, i)
            results.add(query) 
            start = i+1
        }
    }
    val rest = text.substring(start)
    results.add(rest) 

    return results
}

// Will need a better approch to command line argument handling 
// but for not this works
fun main(files: Array<String>) {
    for (filePath in files) {
        val file = File(filePath)

        if (file.exists()) {
            val queries = extractQueries(file) 
            for (query in queries) {
                println("\n\nQuery") 
                println(query)
            }
        } else {
            val absPath = Paths.get(filePath).toAbsolutePath().toString()
            println("Couldn't find file: $absPath")
        }
    }
}
